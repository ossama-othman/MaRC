// -*- C++ -*-
/**
 * @file LongitudeImage.h
 *
 * Copyright (C) 2003-2004, 2017  Ossama Othman
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301  USA
 *
 * @author Ossama Othman
 */

#ifndef MARC_LONGITUDE_IMAGE_H
#define MARC_LONGITUDE_IMAGE_H

#include "marc/VirtualImage.h"
#include "marc/Export.h"


namespace MaRC
{

    /**
     * @class LongitudeImage LongitudeImage.h <marc/LongitudeImage.h>
     *
     * @brief Longitude virtual image.
     *
     * This concrete VirtualImage returns the given longitude in
     * degrees.
     */
    class MARC_API LongitudeImage final : public VirtualImage
    {
    public:

        /// Constructor
        /**
         * @param[in] scale             Linear scaling value by which
         *                              longitudes should be
         *                              multiplied.
         * @param[in] offset            Offset value to be added to
         *                              longitudes after the scaling
         *                              factor has been applied.
         */
        LongitudeImage(double scale, double offset);

        /// Destructor.
        virtual ~LongitudeImage() = default;

        /**
         * @brief Angle unit of longitudes generated by this class.
         *
         * @see VirtualImage::unit()
         *
         * @return Longitude angle unit.
         *
         * @note "deg" is used is instead of "degree" per FITS
         *       standard recommendation for the BUNIT keyword.
         *
         * @see https://heasarc.gsfc.nasa.gov/docs/fcg/standard_dict.html
         */
        virtual char const * unit() const override { return "deg"; }

    private:

        /// Simply return the given longitude in degrees.
        /**
         * @see MaRC::VirtualImage::read_data_i().
         */
        virtual bool read_data_i(double lat,
                                 double lon,
                                 double & data) const override;

    };

} // End MaRC namespace


#endif  /* MARC_LONGITUDE_IMAGE_H */
